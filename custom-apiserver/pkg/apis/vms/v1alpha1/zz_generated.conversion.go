//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	unsafe "unsafe"

	vms "github.com/flashhhhh/Virtual-Machines-Management/custom-apiserver/pkg/apis/vms"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*VirtualMachine)(nil), (*vms.VirtualMachine)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_VirtualMachine_To_vms_VirtualMachine(a.(*VirtualMachine), b.(*vms.VirtualMachine), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*vms.VirtualMachine)(nil), (*VirtualMachine)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_vms_VirtualMachine_To_v1alpha1_VirtualMachine(a.(*vms.VirtualMachine), b.(*VirtualMachine), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*VirtualMachineList)(nil), (*vms.VirtualMachineList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_VirtualMachineList_To_vms_VirtualMachineList(a.(*VirtualMachineList), b.(*vms.VirtualMachineList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*vms.VirtualMachineList)(nil), (*VirtualMachineList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_vms_VirtualMachineList_To_v1alpha1_VirtualMachineList(a.(*vms.VirtualMachineList), b.(*VirtualMachineList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*VirtualMachineStatus)(nil), (*vms.VirtualMachineStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_VirtualMachineStatus_To_vms_VirtualMachineStatus(a.(*VirtualMachineStatus), b.(*vms.VirtualMachineStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*vms.VirtualMachineStatus)(nil), (*VirtualMachineStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_vms_VirtualMachineStatus_To_v1alpha1_VirtualMachineStatus(a.(*vms.VirtualMachineStatus), b.(*VirtualMachineStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*VirtualMachineSpec)(nil), (*vms.VirtualMachineSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_VirtualMachineSpec_To_vms_VirtualMachineSpec(a.(*VirtualMachineSpec), b.(*vms.VirtualMachineSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*vms.VirtualMachineSpec)(nil), (*VirtualMachineSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_vms_VirtualMachineSpec_To_v1alpha1_VirtualMachineSpec(a.(*vms.VirtualMachineSpec), b.(*VirtualMachineSpec), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_VirtualMachine_To_vms_VirtualMachine(in *VirtualMachine, out *vms.VirtualMachine, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_VirtualMachineSpec_To_vms_VirtualMachineSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_VirtualMachineStatus_To_vms_VirtualMachineStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_VirtualMachine_To_vms_VirtualMachine is an autogenerated conversion function.
func Convert_v1alpha1_VirtualMachine_To_vms_VirtualMachine(in *VirtualMachine, out *vms.VirtualMachine, s conversion.Scope) error {
	return autoConvert_v1alpha1_VirtualMachine_To_vms_VirtualMachine(in, out, s)
}

func autoConvert_vms_VirtualMachine_To_v1alpha1_VirtualMachine(in *vms.VirtualMachine, out *VirtualMachine, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_vms_VirtualMachineSpec_To_v1alpha1_VirtualMachineSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_vms_VirtualMachineStatus_To_v1alpha1_VirtualMachineStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_vms_VirtualMachine_To_v1alpha1_VirtualMachine is an autogenerated conversion function.
func Convert_vms_VirtualMachine_To_v1alpha1_VirtualMachine(in *vms.VirtualMachine, out *VirtualMachine, s conversion.Scope) error {
	return autoConvert_vms_VirtualMachine_To_v1alpha1_VirtualMachine(in, out, s)
}

func autoConvert_v1alpha1_VirtualMachineList_To_vms_VirtualMachineList(in *VirtualMachineList, out *vms.VirtualMachineList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]vms.VirtualMachine, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_VirtualMachine_To_vms_VirtualMachine(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_VirtualMachineList_To_vms_VirtualMachineList is an autogenerated conversion function.
func Convert_v1alpha1_VirtualMachineList_To_vms_VirtualMachineList(in *VirtualMachineList, out *vms.VirtualMachineList, s conversion.Scope) error {
	return autoConvert_v1alpha1_VirtualMachineList_To_vms_VirtualMachineList(in, out, s)
}

func autoConvert_vms_VirtualMachineList_To_v1alpha1_VirtualMachineList(in *vms.VirtualMachineList, out *VirtualMachineList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VirtualMachine, len(*in))
		for i := range *in {
			if err := Convert_vms_VirtualMachine_To_v1alpha1_VirtualMachine(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_vms_VirtualMachineList_To_v1alpha1_VirtualMachineList is an autogenerated conversion function.
func Convert_vms_VirtualMachineList_To_v1alpha1_VirtualMachineList(in *vms.VirtualMachineList, out *VirtualMachineList, s conversion.Scope) error {
	return autoConvert_vms_VirtualMachineList_To_v1alpha1_VirtualMachineList(in, out, s)
}

func autoConvert_v1alpha1_VirtualMachineSpec_To_vms_VirtualMachineSpec(in *VirtualMachineSpec, out *vms.VirtualMachineSpec, s conversion.Scope) error {
	out.Image = in.Image
	out.Size = in.Size
	out.SSHKeyIDs = *(*[]string)(unsafe.Pointer(&in.SSHKeyIDs))
	out.SubnetID = in.SubnetID
	out.SecurityGroupIDs = *(*[]string)(unsafe.Pointer(&in.SecurityGroupIDs))
	return nil
}

func autoConvert_vms_VirtualMachineSpec_To_v1alpha1_VirtualMachineSpec(in *vms.VirtualMachineSpec, out *VirtualMachineSpec, s conversion.Scope) error {
	out.Image = in.Image
	out.Size = in.Size
	out.SSHKeyIDs = *(*[]string)(unsafe.Pointer(&in.SSHKeyIDs))
	out.SubnetID = in.SubnetID
	out.SecurityGroupIDs = *(*[]string)(unsafe.Pointer(&in.SecurityGroupIDs))
	return nil
}

func autoConvert_v1alpha1_VirtualMachineStatus_To_vms_VirtualMachineStatus(in *VirtualMachineStatus, out *vms.VirtualMachineStatus, s conversion.Scope) error {
	out.Phase = in.Phase
	out.ID = in.ID
	out.IP = in.IP
	return nil
}

// Convert_v1alpha1_VirtualMachineStatus_To_vms_VirtualMachineStatus is an autogenerated conversion function.
func Convert_v1alpha1_VirtualMachineStatus_To_vms_VirtualMachineStatus(in *VirtualMachineStatus, out *vms.VirtualMachineStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_VirtualMachineStatus_To_vms_VirtualMachineStatus(in, out, s)
}

func autoConvert_vms_VirtualMachineStatus_To_v1alpha1_VirtualMachineStatus(in *vms.VirtualMachineStatus, out *VirtualMachineStatus, s conversion.Scope) error {
	out.Phase = in.Phase
	out.ID = in.ID
	out.IP = in.IP
	return nil
}

// Convert_vms_VirtualMachineStatus_To_v1alpha1_VirtualMachineStatus is an autogenerated conversion function.
func Convert_vms_VirtualMachineStatus_To_v1alpha1_VirtualMachineStatus(in *vms.VirtualMachineStatus, out *VirtualMachineStatus, s conversion.Scope) error {
	return autoConvert_vms_VirtualMachineStatus_To_v1alpha1_VirtualMachineStatus(in, out, s)
}
